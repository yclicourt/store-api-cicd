# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Store-APP-Ecommerce CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  ci:
  
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 6qsIbJ66!V39IRw!
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
       DATABASE_URL: postgresql://postgres:6qsIbJ66!V39IRw!@localhost:5432/storedb
    steps:
    - name: Check out code
      uses: actions/checkout@v4
    
    - name: Install node
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm run build --if-present
        cd ./src/prisma
        npx prisma generate && npx prisma migrate dev --name init
  
    - name: Run unit-test 
      run: npm test

    - name: Set up Docker Build to Image
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push to Registry
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: yoandevelop/store-app-api:${{ github.sha }}
  
  cd:
    runs-on: ubuntu-latest
    needs: ci
    steps:

      - name: Check out code
        uses: actions/checkout@v4
        with:
          repository: medyagh/local-dev-example-with-minikube

      - name: Start minikube
        uses: medyagh/setup-minikube@latest

      - name: Try the cluster!
        run: kubectl get pods -A

      - name: Deploy to minikube
        run: |
          kubectl create ns store-api
          kubectl config set-context --current --namespace=store-api
          kubectl apply -f ./deploy-k8s/
      - name: Test service URLs
        run: |
          minikube service list
          minikube service local-devex-svc --url
          echo -n "------------------opening the service------------------"
          curl $(minikube service local-devex-svc --url)/version

